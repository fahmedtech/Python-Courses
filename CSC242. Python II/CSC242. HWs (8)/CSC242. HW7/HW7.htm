<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<!-- saved from url=(0067)http://reed.cs.depaul.edu/lperkovic/csc242/homeworks/Homework7.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
    
    <meta name="GENERATOR" content="Mozilla/4.75 [en] (X11; U; Linux
      2.2.14-5.0 i686) [Netscape]">
    <meta name="author" content="Ljubomir Perkovic">
    <title>Introduction to Computer Science II</title>
    <!--<base target="_top">--><base href="." target="_top">
    
  <style type="text/css"></style></head>
  <body style="background-color: rgb(255, 255, 255);">
    <h1>&nbsp;</h1>
    <h1 style="text-align: center;">Introduction to Computer Science II<br>
    </h1>
    <center>
      <h2>&nbsp; Lab and Homework 7<br>
      </h2>
    </center>
    <center>
      <h3>Due by 1:30pm on Tuesday, March 4<br>
      </h3>
    </center>
    <center>
      <h3>
        <hr></h3>
    </center>
    <h3>Reading<br>
    </h3>
    Read chapter 10 of the textbook.<br>
    <br>
    <h3>Problems</h3>
    <span style="font-weight: bold;">Implement the below functions in </span><a href="http://reed.cs.depaul.edu/lperkovic/csc242/homeworks/homework7.py">homework7.py</a><span style="font-weight:
      bold;"> and submit through COL.</span><span style="font-weight:
      bold;"><br>
    </span><span style="font-weight: bold;"><br>
    </span><br>
    <b>0.</b>&nbsp;&nbsp;&nbsp; Lab attendance is required and
    constitutes 20% of the lab grade.<span style="font-weight: bold;"></span><br>
    <br>
    <span style="font-weight: bold;"><br>
      1.&nbsp;</span>&nbsp;&nbsp; <span style="font-weight: bold;"></span>Implement
recursive

    program <span style="font-family: monospace;">pattern()</span> to
    produce the turtle graphics patterns shown below. To help you, I am
    giving you function <span style="font-family: monospace;">square()</span>
    that takes length l and coordinates x and y&nbsp;as input and draws
    a red square with a black border of side length l and centered at
    coordinates (x,y). Here is how to use this function:<br>
    <span style="font-family: monospace;"></span><br>
    <div style="margin-left: 40px;"><span style="font-family:
        monospace;">&gt;&gt;&gt; from turtle import Screen, Turtle</span><br style="font-family: monospace;">
      <span style="font-family: monospace;">&gt;&gt;&gt; s = Screen()</span><br style="font-family: monospace;">
      <span style="font-family: monospace;">&gt;&gt;&gt; t = Turtle()</span><br style="font-family: monospace;">
      <span style="font-family: monospace;">&gt;&gt;&gt;
        square(t,0,0,300) # makes turtle t draw square centered at (0,0)
        with side length 300 pixels</span><br>
    </div>
    <br>
    <div style="margin-left: 40px;"><img style="width: 400px; height:
        388px;" alt="" src="./HW7_files/pattern1.png"><br>
    </div>
    <br>
    The above happens to also be <tt>pattern(1)</tt>, or more precisely
    the output of<span style="font-family: monospace;">
      pattern(t,0,0,300</span><span style="color: rgb(255, 0, 0);
      font-family: monospace;">,1</span><span style="font-family:
      monospace;">)</span>. The base case, <span style="font-family:
      monospace;">pattern(0)</span> is just nothing... Here is <span style="font-family: monospace;">pattern(2)</span>:<br>
    <span style="font-family: monospace;"></span><br style="font-family:
      monospace;">
    <div style="margin-left: 40px;"><span style="font-family:
        monospace;">&gt;&gt;&gt; pattern(t,0,0,300,2)</span><br>
    </div>
    <br>
    <div style="margin-left: 40px;"><img style="width: 400px; height:
        389px;" alt="" src="./HW7_files/pattern2.png"><br>
    </div>
    <br>
    Each of the four small squares is centered at an endpoint of the
    original square and has length 1/2.2 of the original square. Note
    how some squares are drawn on top of others: the squares on top are
    drawn <span style="font-style: italic;">after</span> the squares on
    the bottom. The patterns <span style="font-family: monospace;">pattern(3)</span>
    and <span style="font-family: monospace;">pattern(4)</span> are
    similarly defined, using recursion:<br>
    <br>
    <div style="margin-left: 40px;"><span style="font-family:
        monospace;">&gt;&gt;&gt; pattern(t,0,0,300,3)</span><br>
      <br>
      <img style="width: 400px; height: 388px;" alt="" src="./HW7_files/pattern3.png"><br>
      <br>
      <span style="font-family: monospace;">&gt;&gt;&gt;
        pattern(t,0,0,300,4)</span><br>
      <br>
      <img style="width: 400px; height: 388px;" alt="" src="./HW7_files/pattern4.png"><br>
    </div>
    <br>
    <br>
    <br>
    <span style="font-weight: bold;">2.&nbsp;&nbsp;&nbsp; </span>This
    question involves a game with teddy bears. The game starts when I
    give you n bears. You then start giving me back some bears, but you
    must follow these rules:<br>
    <ol>
      <li>If n is divisible by 10, then you may give back 8 bears.</li>
      <li>If n is even, then you may give back exactly n/2 bears.&nbsp;<br>
      </li>
      <li>If n is divisible by 3, then you may give back 22 bears.<br>
      </li>
      <li>If n is divisible by 4, then you may give back 10 bears. </li>
    </ol>
    The goal of the game for you is to end up with EXACTLY 22 bears. For
    example, suppose that you start with 76 bears. Then you could make
    these moves: <br>
    <ul>
      <li> Start with 76 bears. </li>
      <li> Since 76 is divisible by 4, you may return 10 bears, leaving
        you with 66 bears. </li>
      <li> Since 66 is divisible by 3, you may return 22 bears, leaving
        you with 44 bears. </li>
      <li> Since 44 is even, you may return half of the bears, leaving
        you with 22 bears. </li>
      <li> You have reached the goal! </li>
    </ul>
    Note that more than one rule may apply for some number n.<br>
    <br>
    You are to write a function <span style="font-family: monospace;">bears()

    </span>that takes input n and returns True if it is at all
    possible&nbsp;to win the game; only when no sequence of rules leads
    to 22 should your function return False. Your function must use
    recursion to check all possible ways in which you can apply the
    rules.<br>
    <br>
    <div style="margin-left: 40px;">Usage:<br>
    </div>
    <div style="margin-left: 40px;"><span style="font-family:
        monospace;">&gt;&gt;&gt; bears(21)</span><br>
      <span style="font-family: monospace;">False</span><br>
      <span style="font-family: monospace;">&gt;&gt;&gt; bears(22)</span><br>
      <span style="font-family: monospace;">True</span><br>
      <span style="font-family: monospace;">&gt;&gt;&gt; bears(30)</span><br>
      <span style="font-family: monospace;">True</span><br>
      <span style="font-family: monospace;">&gt;&gt;&gt; bears(76)</span><br>
      <span style="font-family: monospace;">True</span><br>
      <span style="font-family: monospace;">&gt;&gt;&gt; bears(250)</span><br>
      <span style="font-family: monospace;">False</span><br>
      <span style="font-family: monospace;">&gt;&gt;&gt; bears(260)</span><br>
      <span style="font-family: monospace;">True</span><br>
      <span style="font-family: monospace;"></span></div>
    <span style="font-family: monospace;"><br>
      <br>
    </span> <span style="font-weight: bold;">3.</span>&nbsp;&nbsp;&nbsp;

    <span style="font-weight: bold;"></span>Write a recursive function <span style="font-family: monospace;">directory() </span>that takes a
    string -- the name of a directory or folder -- and an integer n --
    the initial indentation -- and prints on the screen the pathname
    (relative to the starting directory) of every file and subdirectory
    and recursively calls it self on every subdirectory. The file and
    subdirectory names should be output with an indentation that
    corresponds to the hierarchy of the directory tree. For example,
    when run from within <a style="font-family: monospace;">test</a>
    directory (which you can download from <a href="http://reed.cs.depaul.edu/lperkovic/csc242/homeworks/test.zip">test.zip</a>)
    the output should be:<br>
    <br>
    <div style="margin-left: 40px;">Usage:<br>
      <span style="font-family: monospace;">&gt;&gt;&gt;
        directory('homework7.py', 0)<br>
        &nbsp;homework7.py<br>
        &gt;&gt;&gt; directory('test', 0)<br>
        &nbsp;test<br>
        &nbsp;&nbsp;&nbsp;&nbsp; test/dir1<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test/dir1/dir3<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

        test/dir1/dir3/dir4<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

        test/dir1/dir3/dir4/file3.txt<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

        test/dir1/dir3/dir4/file5.txt<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

        test/dir1/dir3/file2.txt<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        test/dir1/file1.txt<br>
        &nbsp;&nbsp;&nbsp;&nbsp; test/dir2<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        test/dir2/file6.txt<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        test/dir2/file7.txt<br>
        &nbsp;&nbsp;&nbsp;&nbsp; test/file4.txt<br>
      </span><span style="font-family: monospace;"></span></div>
    <br>
    <span style="font-family: monospace;"><br>
      <br>
    </span><span style="font-weight: bold;">4.</span>&nbsp;&nbsp;&nbsp;
    Download and unzip the archive <a href="http://reed.cs.depaul.edu/lperkovic/csc242/homeworks/files.zip">files.zip</a> into the directory containing homework7.py. Open <span style="font-family:
      monospace;">file0.txt</span> and note that <span style="font-family: monospace;">file0.txt</span> lists <span style="font-family: monospace;">file1.txt</span> in line 1 and <span style="font-family: monospace;">file2.txt</span> in line 2; <span style="font-family: monospace;">file1.txt</span> lists <span style="font-family: monospace;">file3.txt</span> in line 1 and <span style="font-family: monospace;">file4.txt</span> in line 2, etc.
    Think of the files as web pages containing links to other web pages.
    Write a <span style="font-weight: bold;">recursive</span> method <span style="font-family: monospace;">traverse(file)</span> that for
    input <span style="font-family: monospace;">'fileX.txt'</span>,
    outputs a message <span style="font-family: monospace;">"Visiting
      fileX.txt"</span>, opens the file <span style="font-family:
      monospace;">fileX.txt</span> for reading, reads each line of <span style="font-family: monospace;">fileX.txt</span> and recursively
    calls <span style="font-family: monospace;">traverse()</span> on
    each line (i.e. file).<br>
    <br>
    <blockquote> Usage:<br>
      <span style="font-family: monospace;">&gt;&gt;&gt;
        traverse('file0.txt')</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file0.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file1.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file3.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file4.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file8.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file9.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file2.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file5.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file6.txt</span><br>
      <span style="font-family: monospace;">Visiting&nbsp; file7.txt<br>
      </span><span style="font-family: monospace;"></span> </blockquote>
    <br>
    <br>
    <span style="font-weight: bold;">5.&nbsp;</span>&nbsp;&nbsp;
    Implement
    the function <span style="font-family: monospace;">permutations() </span>that
takes
    a list <span style="font-family: monospace;">lst</span> as input
    and returns a list of all permutations of <span style="font-family:
      monospace;">lst</span> (so the returned value is a
    list of lists). Do this recursively as follows. If the input list <span style="font-family: monospace;">lst</span> is of size 1 or 0, just
    return a list containing list <span style="font-family: monospace;">lst</span>.
    Otherwise, make a recursive call on the sublist <span style="font-family: monospace;">lst[1:]</span> to obtain the list
    of
    all permutations
    of all elements of <span style="font-family: monospace;">lst</span>
    except the first element <span style="font-family: monospace;">lst[0]</span>.
    Then, for each
    such permutation (i.e. list) <span style="font-family: monospace;">perm</span>,
    generate permutations of lst by
    inserting <span style="font-family: monospace;">lst[0]</span> into
    all
    possible positions of <span style="font-family: monospace;">perm</span>.<br>
    <br>
    <div style="margin-left: 40px;">Usage:<br>
      <span style="font-family: monospace;"><span style="font-family:
          monospace;">&gt;&gt;&gt; permutations([1])<br>
          [[1]]<br>
        </span>&gt;&gt;&gt; permutations([1,2])<br>
        [[1, 2], [2, 1]]<br>
        &gt;&gt;&gt; permutations([1,2,3])<br>
        [[1, 2, 3], [2, 1, 3], [2, 3, 1], [1, 3, 2], [3, 1, 2], [3, 2,
        1]]<br>
        &gt;&gt;&gt; permutations([1,2,3,4])<br>
        [[1, 2, 3, 4], [2, 1, 3, 4], [2, 3, 1, 4], [2, 3, 4, 1], [1, 3,
        2, 4], [3, 1, 2, 4], [3, 2, 1, 4], [3, 2, 4, 1], [1, 3, 4, 2],
        [3, 1, 4, 2], [3, 4, 1, 2], [3, 4, 2, 1], [1, 2, 4, 3], [2, 1,
        4, 3], [2, 4, 1, 3], [2, 4, 3, 1], [1, 4, 2, 3], [4, 1, 2, 3],
        [4, 2, 1, 3], [4, 2, 3, 1], [1, 4, 3, 2], [4, 1, 3, 2], [4, 3,
        1, 2], [4, 3, 2, 1]]<br>
        &gt;&gt;&gt; permutations([1,2,3,4,5])<br>
        [[1, 2, 3, 4, 5], [2, 1, 3, 4, 5], [2, 3, 1, 4, 5], [2, 3, 4, 1,
        5], [2, 3, 4, 5, 1], [1, 3, 2, 4, 5], [3, 1, 2, 4, 5], [3, 2, 1,
        4, 5], [3, 2, 4, 1, 5], [3, 2, 4, 5, 1], [1, 3, 4, 2, 5], [3, 1,
        4, 2, 5], [3, 4, 1, 2, 5], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [1,
        3, 4, 5, 2], [3, 1, 4, 5, 2], [3, 4, 1, 5, 2], [3, 4, 5, 1, 2],
        [3, 4, 5, 2, 1], [1, 2, 4, 3, 5], [2, 1, 4, 3, 5], [2, 4, 1, 3,
        5], [2, 4, 3, 1, 5], [2, 4, 3, 5, 1], [1, 4, 2, 3, 5], [4, 1, 2,
        3, 5], [4, 2, 1, 3, 5], [4, 2, 3, 1, 5], [4, 2, 3, 5, 1], [1, 4,
        3, 2, 5], [4, 1, 3, 2, 5], [4, 3, 1, 2, 5], [4, 3, 2, 1, 5], [4,
        3, 2, 5, 1], [1, 4, 3, 5, 2], [4, 1, 3, 5, 2], [4, 3, 1, 5, 2],
        [4, 3, 5, 1, 2], [4, 3, 5, 2, 1], [1, 2, 4, 5, 3], [2, 1, 4, 5,
        3], [2, 4, 1, 5, 3], [2, 4, 5, 1, 3], [2, 4, 5, 3, 1], [1, 4, 2,
        5, 3], [4, 1, 2, 5, 3], [4, 2, 1, 5, 3], [4, 2, 5, 1, 3], [4, 2,
        5, 3, 1], [1, 4, 5, 2, 3], [4, 1, 5, 2, 3], [4, 5, 1, 2, 3], [4,
        5, 2, 1, 3], [4, 5, 2, 3, 1], [1, 4, 5, 3, 2], [4, 1, 5, 3, 2],
        [4, 5, 1, 3, 2], [4, 5, 3, 1, 2], [4, 5, 3, 2, 1], [1, 2, 3, 5,
        4], [2, 1, 3, 5, 4], [2, 3, 1, 5, 4], [2, 3, 5, 1, 4], [2, 3, 5,
        4, 1], [1, 3, 2, 5, 4], [3, 1, 2, 5, 4], [3, 2, 1, 5, 4], [3, 2,
        5, 1, 4], [3, 2, 5, 4, 1], [1, 3, 5, 2, 4], [3, 1, 5, 2, 4], [3,
        5, 1, 2, 4], [3, 5, 2, 1, 4], [3, 5, 2, 4, 1], [1, 3, 5, 4, 2],
        [3, 1, 5, 4, 2], [3, 5, 1, 4, 2], [3, 5, 4, 1, 2], [3, 5, 4, 2,
        1], [1, 2, 5, 3, 4], [2, 1, 5, 3, 4], [2, 5, 1, 3, 4], [2, 5, 3,
        1, 4], [2, 5, 3, 4, 1], [1, 5, 2, 3, 4], [5, 1, 2, 3, 4], [5, 2,
        1, 3, 4], [5, 2, 3, 1, 4], [5, 2, 3, 4, 1], [1, 5, 3, 2, 4], [5,
        1, 3, 2, 4], [5, 3, 1, 2, 4], [5, 3, 2, 1, 4], [5, 3, 2, 4, 1],
        [1, 5, 3, 4, 2], [5, 1, 3, 4, 2], [5, 3, 1, 4, 2], [5, 3, 4, 1,
        2], [5, 3, 4, 2, 1], [1, 2, 5, 4, 3], [2, 1, 5, 4, 3], [2, 5, 1,
        4, 3], [2, 5, 4, 1, 3], [2, 5, 4, 3, 1], [1, 5, 2, 4, 3], [5, 1,
        2, 4, 3], [5, 2, 1, 4, 3], [5, 2, 4, 1, 3], [5, 2, 4, 3, 1], [1,
        5, 4, 2, 3], [5, 1, 4, 2, 3], [5, 4, 1, 2, 3], [5, 4, 2, 1, 3],
        [5, 4, 2, 3, 1], [1, 5, 4, 3, 2], [5, 1, 4, 3, 2], [5, 4, 1, 3,
        2], [5, 4, 3, 1, 2], [5, 4, 3, 2, 1]]<br>
      </span><br>
    </div>
  

</body></html>